using System.Text.Json;
using System.Text.Json.Serialization;
using Stix.Models;
using Stix.Validation;

namespace Stix.Test;

public class VulnerabilityValidatorUnitTest
{
    private const string SchemaUrl = "https://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/master/schemas/sdos/vulnerability.json";
    private VulnerabilityValidator _validator;
    private JsonSerializerOptions _options;

    [SetUp]
    public async Task SetUp()
    {
        var schema = await VulnerabilityValidator.CreateSchemaAsync(SchemaUrl);
        _validator = new VulnerabilityValidator(schema);
        
        _options = new JsonSerializerOptions
        {
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };
    }
    
    [Test]
    public void Validate_Should_GiveNoErrors_When_ValidInput()
    {
        var vulnerability = new Vulnerability(
            "vulnerability",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        );

        var json = JsonSerializer.Serialize(vulnerability, _options);
        var result = _validator.Validate(json);
        
        Assert.That(result, Has.Count.EqualTo(0));
    }


    [Test, TestCaseSource(nameof(InvalidVulnerabilities))]
    public void Validate_Should_ReturnErrors_When_InvalidInput(Vulnerability vulnerability)
    {
        var json = JsonSerializer.Serialize(vulnerability, _options);
        var result = _validator.Validate(json);
        
        Assert.That(result, Has.Count.GreaterThan(0));
    }
    
    private static IEnumerable<TestCaseData> InvalidVulnerabilities()
    {
        yield return new TestCaseData(new Vulnerability(
            "wrongtype",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        ));
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "1.2.3",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        ));
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "2.1",
            "bad-id--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        ));
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        )
        {
            Confidence = 200
        });
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        )
        {
            CreatedByRef = "ööö"
        });
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        )
        {
            GranularMarkings = new List<GranularMarking>()
        });
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        )
        {
            ExternalReferences = new List<ExternalReference>()
        });
        yield return new TestCaseData(new Vulnerability(
            "vulnerability",
            "2.1",
            "vulnerability--717cb1c9-eab3-4330-8340-e4858055aa80",
            DateTime.Now.ToUniversalTime(),
            DateTime.Now.ToUniversalTime(),
            "CVE-2010-3333"
        )
        {
            ObjectMarkingRefs = new List<string>()
        });
    }
}