using AutoMapper;
using Stix.Models;
using Stix.Persistence;

namespace Stix.Services;

public class VulnerabilityService : IVulnerabilityService
{
    private readonly IVulnerabilityDao _vulnerabilityDao;
    private readonly IMapper _mapper;

    public VulnerabilityService(IVulnerabilityDao vulnerabilityDao, IMapper mapper)
    {
        _vulnerabilityDao = vulnerabilityDao;
        _mapper = mapper;
    }

    public async Task CreateAsync(Vulnerability vulnerability)
    {
        var vulnerabilityEntity = _mapper.Map<VulnerabilityEntity>(vulnerability);
        await _vulnerabilityDao.SaveAsync(vulnerabilityEntity);
    }

    public async Task UpdateAsync(string id, Vulnerability vulnerability)
    {
        var vulnerabilityEntity = _mapper.Map<VulnerabilityEntity>(vulnerability);
        await _vulnerabilityDao.UpdateAsync(id, vulnerabilityEntity); 
    }

    public async Task<Vulnerability> GetByIdAsync(string id)
    {
        var vulnerabilityEntity = await _vulnerabilityDao.GetByIdAsync(id);
        var vulnerability = _mapper.Map<Vulnerability>(vulnerabilityEntity);
        return vulnerability;
    }

    public async Task<IList<Vulnerability>> ListAsync(QueryOptions queryOptions)
    {
        var result = await _vulnerabilityDao.ListAsync(queryOptions);
        return _mapper.Map<IList<Vulnerability>>(result);
    }

    public async Task DeleteAsync(string id)
    {
        await _vulnerabilityDao.DeleteAsync(id);
    }
}