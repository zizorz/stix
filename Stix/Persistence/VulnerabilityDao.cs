using Microsoft.Extensions.Options;
using MongoDB.Driver;

namespace Stix.Persistence;

public class VulnerabilityDao : IVulnerabilityDao
{

    private readonly IMongoCollection<VulnerabilityEntity> _collection;
    
    public VulnerabilityDao(IOptions<DbSettings> dbSettings)
    {
        var mongoClient = new MongoClient(dbSettings.Value.ConnectionString);
        var mongoDatabase = mongoClient.GetDatabase(dbSettings.Value.DatabaseName);
        _collection = mongoDatabase.GetCollection<VulnerabilityEntity>(dbSettings.Value.CollectionName);
    }

    public async Task SaveAsync(VulnerabilityEntity vulnerabilityEntity)
    {
        await _collection.InsertOneAsync(vulnerabilityEntity);
    }

    public async Task UpdateAsync(string id, VulnerabilityEntity vulnerabilityEntity)
    {
        await _collection.ReplaceOneAsync(entity => entity.Id == id, vulnerabilityEntity);
    }

    public async Task DeleteAsync(string id)
    {
        await _collection.DeleteOneAsync(entity => entity.Id == id);
    }

    public async Task<IList<VulnerabilityEntity>> ListAsync()
    { 
        return await _collection.Find(entity => true).ToListAsync(); 
    }

    public async Task<VulnerabilityEntity> GetByIdAsync(string id)
    {
        return await _collection.Find(entity => entity.Id == id).FirstAsync();
    }
}