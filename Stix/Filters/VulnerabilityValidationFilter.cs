using System.Text.Json;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Stix.Validation;

namespace Stix.Filters;

public class VulnerabilityValidationFilter : IAsyncResourceFilter
{
    private readonly IVulnerabilityValidator _vulnerabilityValidator;

    public VulnerabilityValidationFilter(IVulnerabilityValidator vulnerabilityValidator)
    {
        _vulnerabilityValidator = vulnerabilityValidator;
    }
    
    
    public async Task OnResourceExecutionAsync(ResourceExecutingContext context, ResourceExecutionDelegate next)
    {
        context.HttpContext.Request.EnableBuffering();
        var stream = context.HttpContext.Request.Body;
        using var streamReader = new StreamReader(stream);
        var body = await streamReader.ReadToEndAsync();
        stream.Seek(0, SeekOrigin.Begin);

        var validationErrors = _vulnerabilityValidator.Validate(body);
        if (validationErrors.Any())
        {
            var errors = validationErrors.Select(validationError => validationError.ToString());
            var errorResponse = new ValidationErrorResponse(errors);
            context.HttpContext.Response.StatusCode = StatusCodes.Status400BadRequest;
            context.Result = new ContentResult
            {
                Content = JsonSerializer.Serialize(errorResponse)
            };
            return;
        }

        await next();
    }
}

